// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TiktokLocalAPI.Data.Database;

#nullable disable

namespace tiktok_local_linkup_backend.Data.Migrations
{
    [DbContext(typeof(TiktokLocalDbContext))]
    [Migration("20250803080528_1")]
    partial class _1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("TiktokLocalAPI.Core.Models.Order.OrderModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TiktokLocalAPI.Core.Models.Order.ReviewModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("CommunicationRating")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("DeliveryRating")
                        .HasColumnType("double");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProviderComment")
                        .HasColumnType("longtext");

                    b.Property<double?>("ProviderRating")
                        .HasColumnType("double");

                    b.Property<double>("QualityRating")
                        .HasColumnType("double");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("ToUserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("TiktokLocalAPI.Core.Models.Service.ServiceModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompensationAmount")
                        .HasColumnType("longtext");

                    b.Property<string>("CompensationCurrency")
                        .HasColumnType("longtext");

                    b.Property<string>("CompensationType")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Duration")
                        .HasColumnType("longtext");

                    b.Property<string>("FollowerRequirement")
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Requirements")
                        .HasColumnType("longtext");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserModelId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("Views")
                        .HasColumnType("int");

                    b.Property<string>("compensationProduct")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.HasIndex("UserModelId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("TiktokLocalAPI.Data.Models.Chat.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ChatRoomId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("TiktokLocalAPI.Data.Models.Chat.ChatRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("User1Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("User2Id")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("TiktokLocalAPI.Data.Models.User.PasswordResetRequestModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PasswordResetRequests");
                });

            modelBuilder.Entity("TiktokLocalAPI.Data.Models.User.SessionModel", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<string>("AuthToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("AuthTokenCreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("AuthTokenExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("AuthTokenRefreshes")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenCreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RefreshTokenExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("TiktokLocalAPI.Data.Models.User.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<string>("Bio")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("CollaborationTypes")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<Guid?>("EditedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastEditedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("Plan")
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("longtext");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ValidCredits")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TiktokLocalAPI.Core.Models.Order.OrderModel", b =>
                {
                    b.HasOne("TiktokLocalAPI.Data.Models.User.UserModel", "FromUser")
                        .WithMany("OrdersSent")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TiktokLocalAPI.Core.Models.Service.ServiceModel", "Service")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiktokLocalAPI.Data.Models.User.UserModel", "ToUser")
                        .WithMany("OrdersReceived")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("Service");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("TiktokLocalAPI.Core.Models.Order.ReviewModel", b =>
                {
                    b.HasOne("TiktokLocalAPI.Data.Models.User.UserModel", "FromUser")
                        .WithMany("ReviewsGiven")
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TiktokLocalAPI.Core.Models.Order.OrderModel", "Order")
                        .WithOne("Review")
                        .HasForeignKey("TiktokLocalAPI.Core.Models.Order.ReviewModel", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiktokLocalAPI.Data.Models.User.UserModel", "ToUser")
                        .WithMany("ReviewsReceived")
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("Order");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("TiktokLocalAPI.Core.Models.Service.ServiceModel", b =>
                {
                    b.HasOne("TiktokLocalAPI.Data.Models.User.UserModel", null)
                        .WithMany("Services")
                        .HasForeignKey("UserModelId");
                });

            modelBuilder.Entity("TiktokLocalAPI.Data.Models.Chat.ChatMessage", b =>
                {
                    b.HasOne("TiktokLocalAPI.Data.Models.Chat.ChatRoom", null)
                        .WithMany("Messages")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiktokLocalAPI.Data.Models.User.UserModel", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TiktokLocalAPI.Data.Models.Chat.ChatRoom", b =>
                {
                    b.HasOne("TiktokLocalAPI.Data.Models.User.UserModel", "User1")
                        .WithMany()
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TiktokLocalAPI.Data.Models.User.UserModel", "User2")
                        .WithMany()
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("TiktokLocalAPI.Data.Models.User.SessionModel", b =>
                {
                    b.HasOne("TiktokLocalAPI.Data.Models.User.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TiktokLocalAPI.Data.Models.User.UserModel", b =>
                {
                    b.OwnsOne("TiktokLocalAPI.Data.Models.User.BusinessInformation", "BusinessInformation", b1 =>
                        {
                            b1.Property<Guid>("UserModelId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Contact")
                                .HasColumnType("longtext");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("tinyint(1)");

                            b1.Property<string>("Location")
                                .HasColumnType("longtext");

                            b1.Property<string>("Logo")
                                .HasColumnType("longtext");

                            b1.Property<string>("Name")
                                .HasColumnType("longtext");

                            b1.Property<string>("Size")
                                .HasColumnType("longtext");

                            b1.Property<string>("Type")
                                .HasColumnType("longtext");

                            b1.Property<string>("VerificationDocuments")
                                .HasColumnType("longtext");

                            b1.Property<string>("Website")
                                .HasColumnType("longtext");

                            b1.HasKey("UserModelId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserModelId");
                        });

                    b.OwnsOne("TiktokLocalAPI.Data.Models.User.Creator", "Creator", b1 =>
                        {
                            b1.Property<Guid>("UserModelId")
                                .HasColumnType("char(36)");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("tinyint(1)");

                            b1.Property<bool>("ShowFollowerCountPublicly")
                                .HasColumnType("tinyint(1)");

                            b1.HasKey("UserModelId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserModelId");

                            b1.OwnsMany("TiktokLocalAPI.Data.Models.User.Platforms", "Platforms", b2 =>
                                {
                                    b2.Property<Guid>("CreatorUserModelId")
                                        .HasColumnType("char(36)");

                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("char(36)");

                                    b2.Property<bool>("Connect")
                                        .HasColumnType("tinyint(1)");

                                    b2.Property<string>("Handle")
                                        .IsRequired()
                                        .HasColumnType("longtext");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("longtext");

                                    b2.Property<string>("Status")
                                        .IsRequired()
                                        .HasColumnType("longtext");

                                    b2.Property<string>("Subscribers")
                                        .HasColumnType("longtext");

                                    b2.HasKey("CreatorUserModelId", "Id");

                                    b2.ToTable("Platforms");

                                    b2.WithOwner()
                                        .HasForeignKey("CreatorUserModelId");
                                });

                            b1.Navigation("Platforms");
                        });

                    b.OwnsMany("TiktokLocalAPI.Data.Models.User.ServiceProvider", "ServiceProvider", b1 =>
                        {
                            b1.Property<Guid>("UserModelId")
                                .HasColumnType("char(36)");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<bool>("IsActive")
                                .HasColumnType("tinyint(1)");

                            b1.Property<string>("Link")
                                .HasColumnType("longtext");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<double>("StartingRate")
                                .HasColumnType("double");

                            b1.Property<string>("UploadFile")
                                .HasColumnType("longtext");

                            b1.HasKey("UserModelId", "Id");

                            b1.ToTable("ServiceProvider");

                            b1.WithOwner()
                                .HasForeignKey("UserModelId");

                            b1.OwnsMany("TiktokLocalAPI.Data.Models.User.ServiceProviderCategory", "Category", b2 =>
                                {
                                    b2.Property<Guid>("ServiceProviderUserModelId")
                                        .HasColumnType("char(36)");

                                    b2.Property<Guid>("ServiceProviderId")
                                        .HasColumnType("char(36)");

                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("char(36)");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("longtext");

                                    b2.Property<bool>("Status")
                                        .HasColumnType("tinyint(1)");

                                    b2.HasKey("ServiceProviderUserModelId", "ServiceProviderId", "Id");

                                    b2.ToTable("ServiceProviderCategory");

                                    b2.WithOwner()
                                        .HasForeignKey("ServiceProviderUserModelId", "ServiceProviderId");
                                });

                            b1.Navigation("Category");
                        });

                    b.OwnsOne("TiktokLocalAPI.Data.Models.User.StatusUser", "StatusUser", b1 =>
                        {
                            b1.Property<Guid>("UserModelId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("FastResponder")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<bool>("FastResponderStatus")
                                .HasColumnType("tinyint(1)");

                            b1.Property<string>("Reliable")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<bool>("ReliableStatus")
                                .HasColumnType("tinyint(1)");

                            b1.Property<double>("ResponseRate")
                                .HasColumnType("double");

                            b1.Property<double>("ShowUpRate")
                                .HasColumnType("double");

                            b1.Property<string>("TopRated")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<bool>("TopRatedStatus")
                                .HasColumnType("tinyint(1)");

                            b1.HasKey("UserModelId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserModelId");
                        });

                    b.Navigation("BusinessInformation")
                        .IsRequired();

                    b.Navigation("Creator")
                        .IsRequired();

                    b.Navigation("ServiceProvider");

                    b.Navigation("StatusUser")
                        .IsRequired();
                });

            modelBuilder.Entity("TiktokLocalAPI.Core.Models.Order.OrderModel", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("TiktokLocalAPI.Core.Models.Service.ServiceModel", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TiktokLocalAPI.Data.Models.Chat.ChatRoom", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("TiktokLocalAPI.Data.Models.User.UserModel", b =>
                {
                    b.Navigation("OrdersReceived");

                    b.Navigation("OrdersSent");

                    b.Navigation("ReviewsGiven");

                    b.Navigation("ReviewsReceived");

                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
